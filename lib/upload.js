// Generated by CoffeeScript 1.7.1
var GoogleTokenProvider, config, contentTypes, csup, googleapis, log, request, tokenProvider;

request = require('request');

csup = require('./csuplib');

contentTypes = require('./contenttypes');

GoogleTokenProvider = require("refresh-token").GoogleTokenProvider;

config = csup.checkConfig();

log = csup.log;

if (!config) {
  return csup.setup();
}

googleapis = require("googleapis");

tokenProvider = new GoogleTokenProvider({
  'refresh_token': config.refreshToken,
  'client_id': config.clientID,
  'client_secret': config.clientSecret
});

tokenProvider.getToken(function(err, accessToken) {
  var auth;
  config.accessToken = accessToken;
  if (!accessToken) {
    console.error("Couldn't get valid accesstoken. Please run again\ncsup auth");
    process.exit(1);
  }
  csup.storeConfig(function(err) {
    if (err) {
      return console.error("Couldn't store config", (err != null ? err.message : void 0) || err);
    }
  });
  auth = new googleapis.OAuth2Client(config.clientID, config.clientSecret, config.redirectURL);
  return googleapis.discover("drive", "v2").execute(function(err, client) {
    var filename, filetype, url;
    url = auth.generateAuthUrl({
      scope: config.scope
    });
    auth.credentials = csup.credentials();
    filename = config.filename || csup.defaultFilename();
    filetype = config.type || config.defaultType || contentTypes.getContentType(filename);
    return process.stdin.pipe(request.post({
      url: "https://www.googleapis.com/upload/drive/v2/files",
      headers: {
        Authorization: "Bearer " + config.accessToken,
        "Content-Type": "" + filetype + "; charset=UTF-8"
      }
    }, function(err, res) {
      var body, e, fileId, fileSize, req, size, _ref;
      size = 0;
      try {
        body = JSON.parse(res.body);
        fileSize = Math.round((Number(body.fileSize) / 8 / 1024 / 1024) * 100) / 100;
      } catch (_error) {
        e = _error;
        body = null;
      }
      if (err) {
        console.error("Error during upload: ", (err != null ? err.message : void 0) || err || (res != null ? (_ref = res.body) != null ? _ref.error : void 0 : void 0));
        return process.exit(1);
      } else {
        if (body != null ? body.error : void 0) {
          console.error('Error from Google API: ', body != null ? body.error : void 0);
          return process.exit(1);
        } else {
          fileId = body.id;
          req = client.drive.files.update({
            fileId: fileId
          }, {
            title: filename
          });
          body.filename = filename;
          if (!log(2, body)) {
            log(1, {
              id: body.id,
              filename: body.filename,
              mimeType: body.mimeType,
              downloadUrl: body.downloadUrl,
              createdDate: body.createdDate,
              modifiedDate: body.modifiedDate,
              md5Checksum: body.md5Checksum,
              fileSize: Number(body.fileSize),
              originalFilename: body.originalFilename,
              ownerNames: body.ownerNames
            });
          }
          return req.withAuthClient(auth).execute(function(err, res) {
            if (!log(1, "" + fileId + "\t" + res.title + "\t" + fileSize + "mb")) {
              log(0, fileID);
            }
            if (err) {
              console.error('Could not rename uploaded file');
              return process.exit(1);
            } else {
              return process.exit(0);
            }
          });
        }
      }
    }));
  });
});

//# sourceMappingURL=upload.map
