// Generated by CoffeeScript 1.7.1
var YAML, absPath, argv, fs, googleapis, mask, _, _rl;

YAML = require('yamljs');

_ = require('underscore');

fs = require('fs');

googleapis = require("googleapis");

argv = require('optimist').argv;

_rl = null;

absPath = function(p) {
  var home;
  home = process.env['HOME'] || process.env['USERPROFILE'];
  return p != null ? p.replace(/\~\//g, home + "/") : void 0;
};

mask = function(s) {
  if (typeof s !== 'string') {
    return '***';
  }
  if (s.length > 2) {
    return s[0] + Array(s.length - 1).join('*') + s[s.length - 1];
  } else {
    return Array(s.length + 1).join('*');
  }
};

exports.log = function(verbosity, msg) {
  if (verbosity == null) {
    verbosity = 0;
  }
  if (config.verbosity >= verbosity) {
    console.log(msg);
    return true;
  } else {
    return false;
  }
};

exports.configFile = argv.c || argv.config || '~/.csup';

exports.configFile = absPath(exports.configFile);

exports.rl = function() {
  if (_rl) {
    return _rl;
  }
  return _rl = require("readline").createInterface({
    input: process.stdin,
    output: process.stdout
  });
};

exports.defaultOptions = {
  scope: "https://www.googleapis.com/auth/drive.file",
  authCode: "",
  accessToken: "",
  clientID: "",
  clientSecret: "",
  redirectURL: 'http://localhost',
  refreshToken: "",
  defaultFilename: 'file_{timestamp}'
};

exports.loadConfig = function() {
  if (!fs.existsSync(exports.configFile)) {
    return null;
  } else {
    return _.defaults(YAML.load(exports.configFile), exports.defaultOptions);
  }
};

exports.config = exports.loadConfig() || {};

exports.defaultFilename = function() {
  var s, _ref;
  s = ((_ref = exports.config.defaultFilename) != null ? _ref.trim() : void 0) || exports.defaultOptions.defaultFilename;
  return s.replace('{timestamp}', new Date().getTime()).replace('{TIMESTAMP}', Math.round((new Date().getTime()) / 1000)).replace('{date}', String(new Date())).replace('{DATE}', String(new Date()).replace(/\s+/g, '_'));
};

exports.storeConfig = function(cb) {
  var c;
  c = exports.loadConfig() || {};
  c.authCode = exports.config.authCode || null;
  c.accessToken = exports.config.accessToken || null;
  c.clientID = exports.config.clientID || null;
  c.clientSecret = exports.config.clientSecret || null;
  c.accessToken = exports.config.accessToken || null;
  c.refreshToken = exports.config.refreshToken || null;
  c.tokenType = exports.config.tokenType || null;
  if (typeof cb === 'function') {
    return fs.writeFile(exports.configFile, YAML.stringify(c, 2), cb);
  } else {
    return fs.writeFileSync(exports.configFile, YAML.stringify(c, 2));
  }
};

exports.credentials = function() {
  return {
    access_token: exports.config.accessToken,
    refresh_token: exports.config.refreshToken,
    token_type: exports.config.tokenType
  };
};

exports.setup = function() {
  var setupClientTokens;
  exports.config = _.defaults(exports.loadConfig() || {}, exports.defaultOptions);
  console.log("** SETUP CLIENT_ID AND CLIENT_SECRET **\n\nFor more informations how to create api keys visit:\nhttps://developers.google.com/console/help/#generatingdevkeys\n\nExamples:\n\nclientID: 123455-abc38rwfds.apps.googleusercontent.com\nclientSecret: 1wnchd7Xjs-d7ucnJHSXJK\n\nLeave empty to keep previous values\n");
  setupClientTokens = function() {
    var rl;
    rl = exports.rl();
    return rl.question("clientID: ", function(clientID) {
      if (clientID) {
        exports.config.clientID = clientID;
      }
      return rl.question("clientSecret: ", function(clientSecret) {
        if (clientSecret) {
          exports.config.clientSecret = clientSecret;
        }
        console.log("clientSecret: '" + exports.config.clientSecret + "'\nclientID:     '" + exports.config.clientID + "'");
        return rl.question("Is that correct? (Y/n) ", function(yesOrNo) {
          if (/^\s*[nN]+\s*/.test(yesOrNo) || !exports.config.clientSecret || !exports.config.clientID) {
            if (!exports.config.clientSecret || !exports.config.clientID) {
              console.error('ERROR: clientID and clientSecret must be a valid value\n');
            }
            return setupClientTokens();
          } else {
            exports.storeConfig();
            console.log("Values stored in '" + exports.configFile + "'");
            return rl.question("Do want to start the auth process? (Y/n) ", function(yesOrNo) {
              if (/^\s*[nN]+\s*/.test(yesOrNo)) {
                return process.exit(0);
              } else {
                return require('./auth');
              }
            });
          }
        });
      });
    });
  };
  return setupClientTokens();
};

exports.checkConfig = function() {
  var e;
  if (!(exports.config.clientID || !exports.config.clientSecret)) {
    console.error("Couldn't read config file '" + exports.configFile + "'.");
    console.error("Run setup with:\ncsup setup");
    return process.exit(1);
  } else {
    try {
      if (!exports.config) {
        return exports.loadConfig();
      } else {
        return exports.config;
      }
    } catch (_error) {
      e = _error;
      console.error("Could't parse yaml config file '" + exports.configFile + "':", (e != null ? e.message : void 0) || e, "Please fix or remove config file.");
      return process.exit(1);
    }
  }
};

exports.help = function() {
  return "csup v0.0.2 (cloud storage uploader), (c) 2014 by Philipp Staender\n\nUsage: csup (switch) (-option|--option)\n\nswitches:\n  auth        receives `accessToken` from Google API (interactive)\n  setup       setups `clientID` + `clientSecret` (interactive)\n  filename    returns a filename; usage: csup filename \$id\n  download    downloads a file;   usage: csup download \$id > filename.txt\n\noptions:\n  -h --help   displays help\n  -n --name   filename for cloud storage    e.g. -n filename.txt\n  -t --type   force a specific filetype     e.g. -t 'application/zip'\n  -v -vv      verbosity";
};

//# sourceMappingURL=csuplib.map
