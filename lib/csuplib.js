// Generated by CoffeeScript 1.7.1
var YAML, absPath, config, configFile, e, fs, googleapis, _;

YAML = require('yamljs');

_ = require('underscore');

fs = require('fs');

googleapis = require("googleapis");

absPath = function(p) {
  var home;
  home = process.env['HOME'] || process.env['USERPROFILE'];
  return p != null ? p.replace(/\~\//g, home + "/") : void 0;
};

configFile = absPath('~/.csup');

config = {};

exports.defaultOptions = {
  scope: "https://www.googleapis.com/auth/drive.file",
  authCode: 0,
  accessToken: 0,
  clientID: 0,
  clientSecret: 0,
  redirectURL: 'http://localhost',
  refreshToken: 0,
  defaultFilename: 'file_{timestamp}'
};

exports.defaultFilename = function() {
  var s, _ref;
  s = ((_ref = config.defaultFilename) != null ? _ref.trim() : void 0) || exports.defaultOptions.defaultFilename;
  return s.replace('{timestamp}', new Date().getTime()).replace('{TIMESTAMP}', Math.round((new Date().getTime()) / 1000)).replace('{date}', String(new Date())).replace('{DATE}', String(new Date()).replace(/\s+/g, '_'));
};

exports.storeConfig = function(cb) {
  if (typeof cb === 'function') {
    return fs.writeFile(configFile, YAML.stringify(config, 2), cb);
  } else {
    return fs.writeFileSync(configFile, YAML.stringify(config, 2));
  }
};

if (!fs.existsSync(configFile)) {
  console.error("Couldn't load config file '" + configFile + "'.");
  try {
    exports.storeConfig();
  } catch (_error) {
    e = _error;
    console.error("Error on creating file:", typeof err !== "undefined" && err !== null ? err.message : void 0);
  }
  console.error("Created config file with empty values; please set up first to process. For instance:");
  console.error("vi " + configFile);
  process.exit(1);
}

try {
  exports.config = config = _.defaults(YAML.load(configFile), exports.defaultOptions);
} catch (_error) {
  e = _error;
  console.error("Could't parse yaml config file '" + configFile + "':", (e != null ? e.message : void 0) || e);
  process.exit(1);
}

exports.credentials = function() {
  return {
    access_token: config.accessToken,
    refresh_token: config.refreshToken,
    token_type: config.tokenType
  };
};

//# sourceMappingURL=csuplib.map
